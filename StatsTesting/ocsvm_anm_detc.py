import numpy as np
from ccbdl.storages import storages
from StatsTesting.base_anomaly_stats import BaseAnomalyStats
from StatsTesting.anomaly_score_stats import anomaly_score_stats
from sklearn.svm import OneClassSVM
from Plotting.statmodels_anomaly_plot import testdata_plotting

class AnomalyDetection_OCSVM(BaseAnomalyStats):
        
    # def __init__(self, path, network):
    def __init__(self, path, study_config: dict, data_config: dict):    
                  
        self.path = path
        self.study_config = study_config
        self.data_config = data_config

        super().__init__(data_config)

        # For storage of results and plots    
        self.parameter_storage = storages.ParameterStorage(path)
        self.parameter_storage.write("This file is automatically generated by ccbdl.learning.base.BaseLearning")
        self.figure_storage = storages.FigureStorage(path, dpi=300, types=("png", "pdf"))
        
        # Reshaping the data
        self.train_array = self.train_array.reshape(-1, 1)
        self.val_array = self.val_array.reshape(-1, 1)
        self.test_array = self.test_array.reshape(-1, 1)
    
    def learning(self):
        
        # Creating and fitting One class svm model to train data
        self.oc_svm = OneClassSVM(gamma='auto', nu = 0.01)   # nu is the fraction of outliers expected in the data
        self.oc_svm.fit(self.train_array)


    def find_threshold(self):
           
        pass


    def find_anomalies(self):
        
        predictions = self.oc_svm.predict(self.test_array)   #Average anomaly score of X
        # Predicting Anomalies             
        preds = [0 if x == -1 else x for x in predictions]
        self.pred_labels = np.array(preds)  
                
        count = self.pred_labels.tolist().count(-1)
                
        print("no of actual anomalies are:", np.sum(self.test_lab_array))
        print("no of predicted anomalies are:", count,'\n' )  
         
        # Getting the scores for anomaly detection
        anomaly_score_stats(ground_truth = self.test_lab_array, 
                            final_preds = self.pred_labels,
                            param_storage = self.parameter_storage)
        
        # Plotting the data and visualizing anomalies
        testdata_plotting(path = self.path,
                          test_data = self.test_array, 
                          test_labels = self.test_lab_array, 
                          pred_labels = self.pred_labels, 
                          figure_storage = self.figure_storage)
                        